class V2 {
  constructor(x = 0, y = 0) {
    this.x = x;
    this.y = y;
  }
}

class CG {
  constructor(canvas, w, h) {
      this.canvas = canvas;
      this.canvas.style.cssText = `
      display: block;
      background-color: black;
      image-rendering: optimizeSpeed;
      image-rendering: pixelated;
      `;
      this.canvas.width = w;
      this.canvas.height = h;
      this.ctx = canvas.getContext('2d');
      this.buffer = new Uint8Array(w*h*4);
      this.width = w;
      this.height = h;
      this.resize();
      window.onresize = this.resize;
  }

  clearBuffer() {
      this.buffer = new Uint8Array(this.width*this.height*4);
  }

  resize() {
      this.canvas.style.scale = Math.min(window.innerWidth / this.canvas.width, window.innerHeight / this.canvas.height);
  }

  setPixel(x, y, color) {
      for (let i = 0; i<4; i++) this.buffer[((y * this.width + x)*4)+i] = color[i];
  }

  clearImage() {
      this.ctx.clearRect(0, 0, this.width, this.height);
  }

  putImage() {
      let id = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
      let pixels = id.data;
      for (let i = 0; i<this.buffer.length; i++) pixels[i] = this.buffer[i];
      this.ctx.putImageData(id, 0, 0);
  }
}

// TODO: finish inputs
const mouse = {
  acc: new V2()
}
const keys = {};
window.addEventListener('mousedown', async e => {
  await canvas.requestPointerLock();
});
window.addEventListener('mousedown', e => {

});
window.addEventListener('mouseup', e => {

});
window.addEventListener('mousemove', e => {
  mouse.acc.x = e.movementX;
  mouse.acc.y = e.movementY;
});
window.addEventListener('keydown', e => {
  if (!keys[e.code])
      keys[e.code] = true;
});
window.addEventListener('keyup', e => {
  keys[e.code] = false;
});

const c = new CG(document.querySelector('#canvas'), 380, 240);

const world = {
  width: 16,
  height: 16,
  map: [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 1],
    [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
    [1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1],
    [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
  ],
  texSize: 32,
  textures: [
    // wall texture

  ]
};

const camera = {
  pos: new V2(1.5, 1.5),
  angle: 0,
  fov: 60 * 0.017453292519943295
}

function run() {
  requestAnimationFrame(run);
  update();
}

function update() {
  for (let i = 0; i < c.width; i++) {
    let rayAngle = camera.angle - (camera.fov / 2) + i * (camera.fov / c.width);
    let dir = new V2(Math.cos(rayAngle), Math.sin(rayAngle));
    let mapPos = new V2(Math.floor(camera.pos.x), Math.floor(camera.pos.y));
    let sideDist = new V2();
    let deltaDist = new V2(dir.x != 0 ? Math.abs(1 / dir.x) : Infinity, dir.y != 0 ? Math.abs(1 / dir.y) : Infinity);
    let perpWallDist;
    let step = new V2();
    let side = 0;
    if (dir.x < 0) {
      step.x = -1;
      sideDist.x = (camera.pos.x - mapPos.x) * deltaDist.x;
    } else {
      step.x = 1;
      sideDist.x = (mapPos.x + 1 - camera.pos.x) * deltaDist.x;
    }
    if (dir.y < 0) {
      step.y = -1;
      sideDist.y = (camera.pos.y - mapPos.y) * deltaDist.y;
    } else {
      step.y = 1;
      sideDist.y = (mapPos.y + 1 - camera.pos.y) * deltaDist.y;
    }
    let hit;
    while (!hit) {
      if (sideDist.x < sideDist.y) {
        sideDist.x += deltaDist.x;
        mapPos.x += step.x;
        side = 0;
      } else {
        sideDist.y += deltaDist.y;
        mapPos.y += step.y;
        side = 1;
      }
      if (world.map[mapPos.y][mapPos.x] > 0) break;
    }
    let fishEyeFix = Math.cos(camera.angle - rayAngle);
    let wallX;
    if (side == 0) {
      perpWallDist = (sideDist.x - deltaDist.x) * fishEyeFix;
      wallX = camera.pos.y + (sideDist.x - deltaDist.x) * dir.y;
    } else {
      perpWallDist = (sideDist.y - deltaDist.y) * fishEyeFix;
      wallX = camera.pos.x + (sideDist.y - deltaDist.y) * dir.x;
    }
    wallX -= Math.floor(wallX);
    let texX = world.texSize - 1 - Math.floor(wallX * world.texSize);
    if (side == 0 && dir.x > 0) texX = world.texSize - texX - 1;
    if (side == 1 && dir.y < 0) texX = world.texSize - texX - 1;
    let lineHeight = c.width / perpWallDist / camera.fov;
    let lineStart = Math.max(Math.floor(-lineHeight / 2 + c.height / 2), 0);
    let lineEnd = Math.min(Math.floor(lineHeight / 2 + c.height / 2), c.height);
    let texNum = world.map[mapPos.y][mapPos.x] - 1;
    let wallYStep = 1 * world.texSize / lineHeight;
    let texPos = (lineStart - c.height / 2 + lineHeight / 2) * wallYStep;

    for (let j = lineStart; j <= lineEnd; j++) {
      let texY = Math.min(Math.max(Math.floor(texPos), 0), world.texSize - 1)
      texPos += wallYStep;
      if (j == c.height / 2) texY = world.texSize / 2;
      let color = world.textures[texNum][texY][texX];
      if (side == 1)
        color = [color[0] / 2, color[1] / 2, color[2] / 2];
      c.setPixel(i, j, [color[0], color[1], color[2], 255]);
    }

    for (let j = 0; j < lineStart; j++) {
      c.setPixel(i, j, [69, 179, 224, 255]);
    }

    // TODO: add floor casting
    for (let j = lineEnd + 1; j < c.height; j++) {
      c.setPixel(i, j, [30, 100, 40, 255]);
    }

    // TODO: make proper controls
    camera.angle += mouse.acc.x / 400;
    camera.pos.x -= Math.cos(camera.angle) * mouse.acc.y / 300;
    camera.pos.y -= Math.sin(camera.angle) * mouse.acc.y / 300;
    mouse.acc.x = 0;
    mouse.acc.y = 0;
    // TODO: wall collision detection and resolution
  }
  c.clearImage();
  c.putImage();
  c.clearBuffer();
}

run()